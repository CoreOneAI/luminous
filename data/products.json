// ---- /api/products ----
app.get('/api/products', async (req, res) => {
  try {
    const { items, source } = await loadCatalog();
    const all = items.map(normalizeItem);

    const q = String(req.query.q ?? '').trim();
    const limit = Math.min(parseInt(req.query.limit || '25', 10) || 25, 100);
    const offset = Math.max(parseInt(req.query.offset || '0', 10) || 0, 0);

    // Optional profile signals (not mandatory)
    const hairType = String(req.query.hairType || '');
    const skinType = String(req.query.skinType || '');
    const concerns = String(req.query.concerns || '');
    const budget   = String(req.query.budget || '');

    let filtered = all;

    if (q) {
      const match = buildMatcher(q);
      filtered = all.filter(match);

      // widen by category hint if still empty
      if (filtered.length === 0) {
        const catHint = (q.match(/shampoo|conditioner|mask|spray|serum|oil|toner|treatment|accessories/i) || [])[0];
        if (catHint) filtered = all.filter(r => (r.category || '').toLowerCase().includes(catHint.toLowerCase()));
      }
    }

    // Gentle profile nudges (never zero-out the list)
    if (filtered.length > 0 && concerns) {
      const c = concerns.toLowerCase();
      const bias = filtered.filter(r =>
        [r.name, r.description, r.category].filter(Boolean).join(' ').toLowerCase().includes(c)
      );
      if (bias.length >= 6) filtered = bias; // only narrow when it keeps variety
    }

    // If we truly found nothing, show a *varied* sample (not the same 4)
    if (filtered.length === 0) {
      filtered = shuffle(all).slice(0, Math.min(12, all.length));
    }

    const total = filtered.length;
    const page  = filtered.slice(offset, offset + limit);

    res.json({
      success: true,
      source,
      query: q,
      total,
      items: page
    });
  } catch (err) {
    console.error('[api/products] error', err);
    res.status(500).json({ success:false, error:'Failed to load catalog' });
  }
});
